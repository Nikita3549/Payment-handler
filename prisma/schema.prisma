generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Content {
  guid String @id @default(uuid())
  key  String
  data Json

  @@map("content")
}

model User {
  guid           String  @id @default(uuid())
  email          String  @unique
  hashedPassword String  @map("hashed_password")
  name           String?
  birthday       Int?
  gender         Gender?
  balance        Int     @default(0)

  orders     Order[]
  writtenoff Writtenoff[]
  paid       Replenishment[]
  refund     Refund[]

  @@map("users")
}

model Tariff {
  guid        String  @id @default(uuid())
  active      Boolean @default(false)
  archive     Boolean @default(false)
  amount      Int
  cost        Int
  title       String
  description String

  replenishment Replenishment[]

  @@map("tariffs")
}

model Service {
  guid        String  @id @default(uuid())
  active      Boolean @default(false)
  archive     Boolean @default(false)
  cost        Int
  title       String
  description String

  orders     Order[]
  refund     Refund[]
  writtenoff Writtenoff[]

  @@map("services")
}

model Order {
  guid        String      @id @default(uuid())
  userGuid    String      @map("user_guid")
  serviceGuid String      @map("service_guid")
  dateCreate  Int
  dateUpdate  Int
  cost        Int
  title       String
  text        String
  status      OrderStatus

  user_guids    User    @relation(fields: [userGuid], references: [guid])
  service_guids Service @relation(fields: [serviceGuid], references: [guid])

  @@map("orders")
}

model Writtenoff {
  guid        String @id @default(uuid())
  userGuid    String @map("user_guid")
  dateCreate  Int    @map("date_create")
  dateUpdate  Int    @map("date_update")
  cost        Int
  serviceGuid String @map("service_guid")

  user_guid      User    @relation(fields: [userGuid], references: [guid])
  services_guids Service @relation(fields: [serviceGuid], references: [guid])

  @@map("writtenoff")
}

model Replenishment {
  guid          String              @id @default(uuid())
  userGuid      String              @map("user_guid")
  dateCreate    Int                 @map("date_create")
  dateUpdate    Int                 @map("date_update")
  cost          Int
  tariffGuid    String              @map("tariff_guid")
  transactionId String              @map("transaction_id")
  status        ReplenishmentStatus

  user_guid    User   @relation(fields: [userGuid], references: [guid])
  tariff_guids Tariff @relation(fields: [tariffGuid], references: [guid])

  @@map("replenishment")
}

model Refund {
  guid        String @id @default(uuid())
  userGuid    String @map("user_guid")
  dateCreate  Int    @map("date_create")
  dateUpdate  Int    @map("date_update")
  cost        Int
  serviceGuid String @map("service_guid")

  user_guid      User    @relation(fields: [userGuid], references: [guid])
  services_guids Service @relation(fields: [serviceGuid], references: [guid])

  @@map("refund")
}

enum Gender {
  male
  female

  @@map("gender")
}

enum ReplenishmentStatus {
  in_process
  paid
}

enum OrderStatus {
  in_queue
  in_process
  completed
  failed
}
